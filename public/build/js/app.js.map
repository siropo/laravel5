{"version":3,"sources":["globals.js","app.js","helpers.js","options.js","fetch_categories.js","forms.js"],"names":[],"mappingsptIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"app.js","sourcesContent":["","var app = {};","app.helpers = {\r\n    /**\r\n     *\r\n     * @returns {number}\r\n     */\r\n    hash: function() {\r\n        var date = Date.now();\r\n\r\n        // Use 2 randoms to avoid same number ever re-occuring\r\n        var random = Math.random() * Math.random();\r\n\r\n        return Math.floor(date * random);\r\n    },\r\n    /**\r\n     *\r\n     * @returns {*|jQuery}\r\n     */\r\n    getAdsId: function() {\r\n        return $('#ads_id').val();\r\n    },\r\n    /**\r\n     *\r\n     * @returns {string}\r\n     */\r\n    clearImageTitlePrefix: function() {\r\n        var title = $('#title').val();\r\n\r\n        return title.replace(/ /g, '_') + '_';\r\n    },\r\n    /**\r\n     *\r\n     * @returns {*|jQuery}\r\n     */\r\n    getCsrfToken: function() {\r\n        return $('meta[name=\"csrf-token\"]').attr('content')\r\n    },\r\n    /**\r\n     *\r\n     * @param imagePrefix\r\n     * @returns {{}}\r\n     */\r\n    getFormData: function(hash) {\r\n        var files = this.getPictureData('file-footer-caption');\r\n        console.log(files);\r\n        var formData = $('form').serializeArray();\r\n        var postData = {};\r\n        formData.map(function(key) {\r\n            postData[key.name] = key.value;\r\n        });\r\n        postData.pictures = [];\r\n        var title = app.helpers.clearImageTitlePrefix();\r\n        for (var i = 0; i < files.length; i++) {\r\n            console.log(files[i]);\r\n            var imgLink = $('[title=\"' + files[i] + '\"]').parents('.file-preview-frame');\r\n            if (!imgLink.hasClass('file-preview-initial')) {\r\n                postData.pictures.push(title + hash + files[i]);\r\n            } else {\r\n                postData.pictures.push(files[i]);\r\n            }\r\n        }\r\n        console.log(postData);\r\n        return postData;\r\n    },\r\n    /**\r\n     *\r\n     * @param className\r\n     * @returns {Array}\r\n     */\r\n    getPictureData: function(className) {\r\n        var files = [];\r\n        $('.' + className).each(function() {\r\n            files.push($(this).attr('title'));\r\n        });\r\n        return files;\r\n    }\r\n};","app.options = {\r\n    getFileInputSettings: function(hash) {\r\n        return {\r\n            initialPreview: '',\r\n            initialPreviewConfig: '',\r\n            initialPreviewAsData: true,\r\n            uploadUrl: '/ads/imageUpload', // server upload action\r\n            uploadAsync: false,\r\n            maxFileCount: 5,\r\n            deleteUrl: \"/ads/imageDelete\",\r\n            overwriteInitial: true,\r\n            maxFileSize: 2000,\r\n            showCaption: true,\r\n            showPreview: true,\r\n            showRemove: true,\r\n            showUpload: true, // <------ just set this from true to false\r\n            showCancel: true,\r\n            showUploadedThumbs: true,\r\n            allowedFileTypes: ['image'],\r\n            allowedFileExtensions: [\"jpg\", \"gif\", \"png\"],\r\n            initialCaption: 'pick image',\r\n            uploadExtraData: function() {\r\n                var obj = {_token: app.helpers.getCsrfToken()};\r\n                obj.clearTitle = app.helpers.clearImageTitlePrefix() + hash;\r\n                return obj;\r\n            },\r\n            deleteExtraData: function() {\r\n                var obj = {\r\n                    _token: app.helpers.getCsrfToken()\r\n                };\r\n                obj.imageData = JSON.stringify(app.helpers.getPictureData('file-footer-caption'));\r\n                obj.id = app.helpers.getAdsId();\r\n                return obj;\r\n            }\r\n        }\r\n    }\r\n};","/**\r\n * @globals selectpicker\r\n */\r\napp.categories = {};\r\n\r\napp.categories.init = function() {\r\n    var _this = this;\r\n\r\n    $.ajax('/ads/getcategories')\r\n        .done(function(data) {\r\n            console.log(data);\r\n            _this.renderCategories(data);\r\n        }).fail(function(err) {\r\n        console.log(err);\r\n    });\r\n};\r\n\r\n/**\r\n * Makes the root category\r\n * @param data\r\n */\r\napp.categories.renderCategories = function(data) {\r\n    var $categoriesRoot = $('.categories-root');\r\n    var $categoriesWrapper = $('.wrapper-categories');\r\n    var _this = this;\r\n    this.appendSelectOption($categoriesRoot);\r\n    for (var root in data) {\r\n        var option = $('<option value=\"' + data[root].id + '\">' +\r\n            data[root].name + '</option>');\r\n        $categoriesRoot.append(option);\r\n    }\r\n    $categoriesRoot.selectpicker({\r\n        size: 8\r\n    }).on('changed.bs.select', function(e) {\r\n        var selected = e.currentTarget.value;\r\n        var child = data[selected].children;\r\n        _this.clearAttrCategoryId($categoriesRoot);\r\n\r\n        var level = 0;\r\n        var counterSelect = $categoriesWrapper.find('select').length - 1;\r\n\r\n        // remove child categories\r\n        _this.removeChildCategories(level, counterSelect);\r\n\r\n        $categoriesWrapper.find('select').selectpicker('refresh');\r\n\r\n        counterSelect = level + 1;\r\n\r\n        if (child.length > 0) {\r\n            _this.appendCategories(child, counterSelect);\r\n        }\r\n    });\r\n};\r\n\r\napp.categories.appendSelectOption = function($select) {\r\n    var option = $('<option value=\"\">Select</option>');\r\n    $select.append(option);\r\n};\r\n\r\n/**\r\n *\r\n * @param level\r\n * @param counterSelect\r\n */\r\napp.categories.removeChildCategories = function(level, counterSelect) {\r\n    if (level < counterSelect) {\r\n        for (var i = level + 1; i <= counterSelect; i++) {\r\n            $('.bootstrap-select.level' + i).remove();\r\n            $('select.level' + i).selectpicker('destroy');\r\n        }\r\n    }\r\n};\r\n\r\napp.categories.clearAttrCategoryId = function($select) {\r\n    var $categories = $('.wrapper-categories');\r\n    var $selectDropDown = $categories.find('select');\r\n    $selectDropDown.attr('name', '');\r\n    $select.attr('name', 'category_id');\r\n};\r\n\r\n\r\n/**\r\n * Makes the child categories\r\n * @param {Array} data Baum result\r\n * @param {string} counterSelect - level of deep\r\n */\r\napp.categories.appendCategories = function(data, counterSelect) {\r\n    var _this = this;\r\n    var $categories = $('.wrapper-categories');\r\n    var $select = $('<select data-level=\"' + counterSelect + '\" class=\"level' + counterSelect + '\">' +\r\n        '</select>');\r\n    this.appendSelectOption($select);\r\n    for (var i = 0; i < Object.keys(data).length; i++) {\r\n        var option = $('<option value=\"' + data[i].id + '\" data-id=\"' + i + '\">' +\r\n            data[i].name + '</option>');\r\n        $select.append(option);\r\n    }\r\n\r\n    $categories.append($select);\r\n\r\n    $select.selectpicker({\r\n        size: 8\r\n    }).on('changed.bs.select', function(e) {\r\n\r\n        var level = e.currentTarget.dataset.level;\r\n        var $selectDropDown = $categories.find('select');\r\n        _this.clearAttrCategoryId($select);\r\n\r\n        var counterSelect = $selectDropDown.length - 1;\r\n        level = +level;\r\n\r\n        _this.removeChildCategories(level, counterSelect);\r\n\r\n        $selectDropDown.selectpicker('refresh');\r\n\r\n        counterSelect = level + 1;\r\n        var selected = e.currentTarget.selectedOptions[0].dataset['id'];\r\n\r\n        // case choose 'select' from drop down - return category_id to previous select\r\n        if (!selected) {\r\n            var $previousSelect = $('select.level' + (level - 1));\r\n            $previousSelect.attr('name', 'category_id');\r\n            _this.clearAttrCategoryId($previousSelect);\r\n            return;\r\n        }\r\n\r\n        var child = data[+selected].children;\r\n\r\n        if (child.length > 0) {\r\n            _this.appendCategories(child, counterSelect);\r\n        }\r\n    });\r\n};\r\n\r\n","app.forms = {};\r\n\r\napp.forms.submit = function(hash, method, url) {\r\n    var postData = app.helpers.getFormData(hash);\r\n    $.ajax({\r\n        type: method,\r\n        url: url,\r\n        data: postData,\r\n        success: function(data) {\r\n            console.log(data);\r\n        },\r\n        error: function(err) {\r\n            console.log(err)\r\n        },\r\n        dataType: 'JSON'\r\n    });\r\n};"],"sourceRoot":"/source/"}